const perricosArray = []; //Un array que almacenar치 las URL de las im치gens de perros para renderizarlas en la p치gina


console.log(perricosArray);

// addPerrico();

//esta linea de abajo no har칤a falta porque ya se ha definido en la funci칩n renderPerrico. 
const dogList = document.querySelector('#dog-list'); //modifica por id el div con id dog-list
//doglist es una variable que selecciona el elemento HTML con el ID dog-list. Este es el contenedor donde se insertaran las tarjetas de los perros
//lo que hace es seleccionar el primer elemento en el DOM que tiene el id='dogList'. el cual corresponde al contenedor en el que se va a agregar las tarjetas de los perros
//es un punto de referencia donde colocar cada nueva tarjeta de perro dogCard.

//funci칩n que agrega eventos a los botones Precioso y fe칤simo: agrega eventListeners a los botones precioso y fe칤simo para cada dogCard
function addSocialListeners(){

 // Funci칩n para los votos positivos: para cada bot칩n de precioso, se a침ade un eventListener, busca al hermano anterior y le suma 1 
//Selecciona todos los botones con la clase .like (bot칩n precioso), por cada bot칩n se agrega un evento que incrementa el n칰mero de votos
document.querySelectorAll('.like').forEach((buttonNode) => { //selecci칩na todos los botones con la clase like
    if(!buttonNode.hasAttribute('data-listened')) { // Verifica si ya tiene un listener: si el bot칩n no tiene el atrinuto data-listened, la condici칩n ser치 verdadera y el bloque de c칩digo dentro del if se ejecuta
        //.hasAttribute es un m칠todo que comprueba si un elemento html tien un atributo espec칤fico
        //si el bot칩n ya tiene el atributo data-listened, no a침adir치 un nuevo listener
        buttonNode.addEventListener('click', function () { //al hacer click busca el elemento anterior (el contador de likes) e incrementa el n칰mero mostrado en el span .like-count
            console.log('me gusta clickado');
            const hermanico = buttonNode.previousElementSibling; //accede al hermano anterior del bot칩n, que en el html es el elemento <p> que contien el contador de likes. Encuentra el span con la clase .like-count dentro de ese <p> y le suma 1 al n칰mero mostrado en ese <span>
            const likeCountNode = hermanico.querySelector('.like-count'); //selecciona el elemento del html span con la class 'like-count'
            likeCountNode.innerText = Number(likeCountNode.innerText) + 1  //y al elemento con class -like-count, le suma 1.
        });
        buttonNode.setAttribute('data-listened', 'true'); // Marca el bot칩n como "escuchado"
        //agrega el atributo data-listened al boton buttonNode
    }
});

//Funci칩n para los votos negarivos: para cada bot칩n de fe칤simo se a침ade un eventListener, busca al hermano anterior y le suma 1
document.querySelectorAll('.dislike').forEach((buttonNode) => { //buttonNode es el bot칩n en el que se hace clic (.like o .dislike).
    if(!buttonNode.hasAttribute('data-listened')) { 
        buttonNode.addEventListener('click', function () {         //previousElementSibling accede al contenedor inmediatamente anterior (el que contiene los contadores like-count o dislike-count).
            console.log('me gusta clickado');
            const hermanico = buttonNode.previousElementSibling;
            const dislikeCountNode = hermanico.querySelector('.dislike-count');
            dislikeCountNode.innerText = Number(dislikeCountNode.innerText) + 1
            });
            buttonNode.setAttribute('data-listened', 'true'); // Marca el bot칩n como "escuchado"
        }
    });
}

//EN ESTA VERSI칍N DEL C칍DIGO A칌ADIREMOS PARTE DEL HTML CON APPENDCHILD USANDO CREATEELEMENT-------------------------------------------------------------------------------------------------------------------------------------------

//esta funci칩n se encarga de a침adir las cards de perritos

function renderPerrico(dogImage, addToStart = false){ //recibe la URL de la imagen de perro
    //crea la tarjeta del perro con la imagen, botones y contadores de votos
    const newDogCard = document.createElement('div'); //creamos un div que contenga la info de la card de perrito
    newDogCard.className = 'dogCard'; //al div le asignamos la clase dogCard previamente definida en el css
    //a침adimos ahora el resto de la card a innerHTML
    newDogCard.innerHTML = `<img class="image" id="perro" alt="imagen de perro" src="${dogImage}"> 
            <div class="cardVote" > 
                <div class="voteCard">
                    <p>游땘 <span class="like-count"></span></p>
                    <button class="like">Precioso</button> 
                </div>
                <div class="voteCard">
                    <p>游뱍 <span class="dislike-count"></span></p>
                    <button class="dislike">Fe칤simo</button>
                </div>
            </div>`;
    
        //const dogList = document.querySelector('#dog-list');
        //como definimos dogList al inicio del c칩digo podemos usarlo ahora para el appendChild

    if (addToStart) { //selecciona el contenedor dogList y a침ade el nuevo elemento
        dogList.prepend(newDogCard); // A침adir al principio del div con id dog-list el elemento que acabamos de crear
    } else {
        dogList.appendChild(newDogCard); // A침adir al final del div la card newDogCard
    }

    //finalmente a침adiremos los event listeners uan vez metidas las nuevas tarjetas en el DOM
    addSocialListeners(); //llama a addSocialListeners para que los nuevos botones funcionen
}

//----------------------------------------------------------------------------------------------------------------------------------------------
//creo que este c칩digo es redundante, no se por qu칠 esto est치 definido as칤
//Las tarjetas se generan directamente en el DOM al agregar perritos con renderPerrico
//No hay funcionalidades que destruyan o modifiquen significativamente el DOM, por lo que no es necesario recurrir al array para re-renderizarlo.
// implementando un bot칩n "Reiniciar" o guardando el estado de la aplicaci칩n), el bloque de c칩digo que actualiza perricosArray al agregar un perrito dejar칤a de ser redundante.
function renderPerricoArray(){
    dogList.innerHTML = ''; // Limpiar el contenido de la lista de perros

    perricosArray.forEach((dogImage)=>{ //itera sobre perricosArray y renderiza todas las im치genes
        //const votes = votesArray[index] || {precioso:0, feisimo:0}; //inicializamos votos si no existen
        renderPerrico(dogImage);
        console.log('innerHtml posici칩n', index, dogList.innerHTML);
    });

    addSocialListeners(); //llama a addSocialListeners para que los nuevos botones funcionen
}
//----------------------------------------------------------------------------------------------------------------------------------------------
//funci칩n para a침adir los perritos con votos + y -, los que est치n en empate y un bot칩n para poder volver a la vista de todas las cards
//la idea es crear funciones que definan una variable "dogCard" la cual contendr치 todas las cards de perritos existentes generadas en ese momento
//se seleccionar치n todas con querySelectorAll, y para cada una de ellas mirar치 en el span con id like-count y dislike-count.
//comparar치 los valores y si se acciona el bot칩n de ver los votos positivos, la funci칩n har치 invisibles todas las tarjetas que no cumplan con el requisito
const positive = document.querySelector('#positives'); 
const negative = document.querySelector('#negatives'); 
const add1dog = document.querySelector('#add-1-perrico');
const add5dog = document.querySelector('#add-5-perrico');
const add1dogStart = document.querySelector('#add-1-perrico-start');

const addPositiveVotes = ()=>{
    //seleccionamos todas las tarjetas de perritos
    const dogCards = document.querySelectorAll('.dogCard'); //metemos en una variable todas las dogCard existentes
    
    dogCards.forEach((card)=>{ //para cada card de perrito definimos la cantidad de likes y dislikes que tiene
        const likeCount = Number(card.querySelector('.like-count').innerText || 0); // Votos positivos, si no tiene votos se le asigna 0 a likeCount.
        const dislikeCount = Number(card.querySelector('.dislike-count').innerText || 0); // Votos negativos

        if (likeCount > dislikeCount) { //si tiene mas likes que dislikes, entonces dejar치 el estilo original de la card
            card.style.display = ''; // Mostrar si tiene m치s votos positivos, Restablece el estilo de la tarjeta
        } else {
            card.style.display = 'none'; // Ocultar si no tiene m치s votos positivos
        }
    });
    add1dog.disabled = true;
    add5dog.disabled = true;
    add1dogStart.disabled = true;
};

// Funci칩n para mostrar perritos con votos negativos
const addNegativeVotes = () => {
    // Seleccionamos todas las tarjetas de perritos
    const dogCards = document.querySelectorAll('.dogCard');

    dogCards.forEach((card) => {
        const likeCount = Number(card.querySelector('.like-count').innerText || 0); // Votos positivos
        const dislikeCount = Number(card.querySelector('.dislike-count').innerText || 0); // Votos negativos

        if (dislikeCount > likeCount) {
            card.style.display = ''; // Mostrar si tiene m치s votos negativos, Restablece el estilo de la tarjeta
        } else {
            card.style.display = 'none'; // Ocultar si no tiene m치s votos negativos, tambi칠n se puede eliminar el innerHTML hacer un filter con los perritos que tineen esta propiedad y rendrizar de nuevo solo los que cumplen la propiedad (en el caso de que tuvieramos la informaci칩n metida en un objeto por ejemplo)
        }
    });
};

//Ahora definimos una funci칩n para perritos empatados

const tiedVotes = () =>{
    // Seleccionamos todas las tarjetas de perritos
    const dogCards = document.querySelectorAll('.dogCard');

    dogCards.forEach((card) => {
        const likeCount = Number(card.querySelector('.like-count').innerText || 0); // Votos positivos
        const dislikeCount = Number(card.querySelector('.dislike-count').innerText || 0); // Votos negativos

        if (dislikeCount === likeCount && dislikeCount && likeCount ) { //si el n칰mero de likes es igual al n칰mero de dislikes y adem치s se ha votado, es decir, no tienen los votos a 0
            card.style.display = ''; // Mostrar si tiene m치s votos negativos, Restablece el estilo de la tarjeta
        } else {
            card.style.display = 'none'; // Ocultar si no tiene m치s votos negativos
        }
    });
    add1dog.disabled = true;
    add5dog.disabled = true;
    add1dogStart.disabled = true;
}

// Funci칩n para mostrar todos los perritos nuevamente: restablecer la visualizaci칩n de todas las tarjetas de perritos en la p치gina
const resetView = () => {
    const dogCards = document.querySelectorAll('.dogCard'); //selecciona todas las cartas de perros 
    dogCards.forEach((card) => { //para cada una de ellas vuelve a dejar el estilo original
        card.style.display = ''; // Mostrar todas las tarjetas, Restablece el estilo de la tarjeta
    });
    //13-02-2025 si no hay perricos, habilitar el bot칩n de a침adir 
    if(dogCards.length > 0){
    add1dog.disabled = false;
    }
    add5dog.disabled = false;
    add1dogStart.disabled = false;
};

// Funci칩n para agregar un perrico aleatorio al array, llama a la funci칩n d la API para obtener una URL del perro

const addPerrico = async (addToStart = false)=>{ //cambiar치 a true si apretamos el bot칩n
    const perricoImg = await getRandomDogImage(); //la funci칩n getRandomDogImage se declara en el archivo api.js
    console.log(perricoImg);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //este bloque de c칩digo es redundante: como addPerrico llama a renderPerrico inmepdiatamente despu칠s, adem치s perricosArray no se usa m치s adelante en ning칰an funci칩n relevante
    //renderPerrico ya maneja el posicionamiento, no hay dependencia entre el array y el DOM
    //el bloque no ser칤a redundante si se necesitara el array de perritos para un porp칩sito espec칤fico del DOM
    if(addToStart){
        perricosArray.unshift(perricoImg);
    } else {
        perricosArray.push(perricoImg); //a침ad la url al array perricosArray y la renderiza en la p치gina con la funci칩n renderPerrico
    }
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    renderPerrico(perricoImg, addToStart); // Re-renderizar la lista con la nueva imagen
    addSocialListeners(); //activa los eventos

    //13-02-2025
    // Desactivar bot칩n al a침adir el primer perrico
    add1dog.disabled = true;
};

// Funci칩n para agregar 5 perricos: definimos una funci칩n as칤ncrona con un for que no dejar치 de ejecutarse hasta que i > 5, es decir que pushee al array perricosArrar 5 im치genes random
const add5Perricos = async () => {
    for (let i = 0; i < 5; i++) {
        addPerrico(); 
    }
    addSocialListeners(); //activa los eventos
};

// Renderizar los perricos al cargar la p치gina
// renderPerricoArray(); //esto hace que la p치gina tenga de primeras imagenes con perritos y no queremos eso, queremos que la p치gina no tenga ning칰n perrito 

//Listeners para los botones de a침adir perritos

// Agregar evento al bot칩n "A침adir 1 perrico m치s"
document.querySelector('#add-1-perrico').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    addPerrico();
});

// Agregar evento al bot칩n "A침adir 5 perricos m치s"
document.querySelector('#add-5-perrico').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    add5Perricos();
});

// Agregar evento al bot칩n "Perritos con votos +"
document.querySelector('#positive-votes').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    addPositiveVotes();
});

// Agregar evento al bot칩n "Perritos con votos -"
document.querySelector('#negative-votes').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    addNegativeVotes();
});

// Agregar evento al bot칩n "Perritos empatados"
document.querySelector('#tied-votes').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    tiedVotes();
});

//Agregar el evento al bot칩n "Mostrar todos de nuevo"
document.querySelector('#reset-view').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    resetView();
});

//Agregar el evento al bot칩n "A침adir 1 perrito al principio"

document.querySelector('#add-1-perrico-start').addEventListener('click', function(){
    addPerrico(true); 
});

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//EVENT DELEGATION: se podr칤a usar eventDelegatio en vez de la funci칩n addSocialListeners.
//a침ade un solo addevent listener al div dogList que contiene las tarjetas de los perros
//cuando ocurre un click en cualquier parte de ese div, se verifica si el elemento clicado (event.target) es un bot칩n con la clase .like o .dislike


/* dogList.addEventListener('click', function (event) {
    if (event.target.classList.contains('like')) { //verifica si el click fue en un bot칩n de like
        const likeCountNode = event.target.previousElementSibling.querySelector('.like-count'); //si es as칤 busca el contador de votos like-count en el hermano anterior (previousElementSibling)
        likeCountNode.innerText = Number(likeCountNode.innerText) + 1; //se convierte el texto del contador en n칰mero y se le suma 1.
    }

    if (event.target.classList.contains('dislike')) {
        const dislikeCountNode = event.target.previousElementSibling.querySelector('.dislike-count');
        dislikeCountNode.innerText = Number(dislikeCountNode.innerText) + 1;
    }
});
 */

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------

/* //aplicaci칩n de setTimeout & intervals para a침adir targetas de perros cada 10s

setInterval(()=>{
    addPerrico();
}, 10000); 
 */

//A los 15 segundos de entrar en la web, si no he hecho click en ninguno de los botones de a침adir perros, que salga un mensaje encima que diga "Pulsa alg칰n bot칩n para a침adir perricos"

const popupTimeout = setTimeout(() => {
    // Verificar si no se ha a침adido ning칰n perro (el contenedor est치 vac칤o)
    if (dogList.children.length === 0) {
        // A침adir el mensaje directamente dentro del contenedor con innerHTML
        document.querySelector('#popup').style.display = 'block';
    }
}, 3000);

//Listener para que al pulsar donde sea se quite el popup

document.querySelector('#popup').addEventListener('click', () => {
        clearTimeout(popupTimeout); // Cancelar el mensaje si hay interacci칩n
        document.querySelector('#popup').style.display = '';
    });